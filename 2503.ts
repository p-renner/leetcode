function maxPoints(grid: number[][], queries: number[]): number[] {
	const sortedQueries = queries.map((query, i) => [query, i]).sort((a, b) => a[0] - b[0]);
	const result = new Array(queries.length).fill(0);
	const directions = [
		[0, 1],
		[0, -1],
		[1, 0],
		[-1, 0],
	];

	let stack: number[][] = [];
	const nextStack: number[][] = [[0, 0]];
	const visited = new Set<number>();
	const memo = new Map<number, number>();

	for (let i = 0; i < sortedQueries.length; i++) {
		const [query, index] = sortedQueries[i];

		if (memo.has(query)) {
			result[index] = memo.get(query)!;
			continue;
		}

		let points = i === 0 ? 0 : result[sortedQueries[i - 1][1]];

		stack = [...nextStack];
		nextStack.length = 0;

		stack.forEach(([x, y]) => {
			visited.delete(x * 1000 + y);
		});

		while (stack.length > 0) {
			const [currentX, currentY] = stack.pop()!;

			if (visited.has(currentX * 1000 + currentY)) {
				continue;
			}

			visited.add(currentX * 1000 + currentY);

			if (grid[currentX][currentY] < query) {
				points++;

				for (const [dx, dy] of directions) {
					const [newX, newY] = [currentX + dx, currentY + dy];

					if (
						newX >= 0 &&
						newX < grid.length &&
						newY >= 0 &&
						newY < grid[0].length &&
						!visited.has(newX * 1000 + newY)
					) {
						stack.push([newX, newY]);
					}
				}
			} else {
				nextStack.push([currentX, currentY]);
			}
		}

		result[index] = points;
		memo.set(query, points);
	}

	return result;
}

test('maxPoints', () => {
	expect(
		maxPoints(
			[
				[1, 2, 3],
				[2, 5, 7],
				[3, 5, 1],
			],
			[5, 6, 2],
		),
	).toStrictEqual([5, 8, 1]);
	expect(
		maxPoints(
			[
				[5, 2, 1],
				[1, 1, 2],
			],
			[3],
		),
	).toStrictEqual([0]);
	expect(
		maxPoints(
			[
				[123491, 95183, 131119, 576084, 779700, 886039, 564610],
				[835246, 594630, 752204, 976312, 431928, 916878, 37773],
				[602559, 675, 8018, 72760, 560850, 132858, 416126],
				[787316, 77587, 784798, 797907, 769783, 143785, 378185],
				[362862, 754648, 212843, 813454, 552332, 10700, 266493],
				[970387, 690405, 956929, 172955, 952240, 156111, 403784],
				[916537, 511212, 795823, 716447, 470772, 943050, 542971],
				[449416, 742776, 952272, 447280, 190229, 354861, 256967],
				[682983, 738563, 29191, 379588, 802026, 480129, 88803],
				[200621, 935415, 758897, 430413, 947532, 642396, 281230],
				[11009, 169593, 224388, 165812, 668820, 197039, 370824],
				[69652, 613219, 858695, 278982, 688142, 592221, 573682],
				[169510, 983952, 45500, 536012, 460040, 22352, 30370],
				[80353, 162875, 946697, 861329, 680011, 716224, 528454],
				[752578, 92518, 914849, 76979, 957241, 215103, 428977],
				[882979, 485485, 371229, 191577, 428367, 22769, 668112],
			],
			[581002, 174698],
		),
	).toStrictEqual([4, 3]);
	expect(
		maxPoints(
			[
				[
					914034, 453318, 890358, 66464, 241824, 627609, 751672, 3912, 103879, 964103, 172337, 537700, 809750,
					275447, 91344, 685368, 16087, 990389, 51724,
				],
				[
					350247, 478851, 13956, 913855, 293160, 942030, 770604, 324424, 154269, 835737, 211748, 987927,
					688311, 997190, 487291, 192031, 413002, 435462, 279037,
				],
				[
					552593, 823760, 17368, 568756, 381899, 930515, 845801, 432960, 82668, 841376, 502318, 1909, 821953,
					908124, 627205, 257411, 589411, 975764, 889588,
				],
				[
					433381, 868134, 490460, 91910, 444695, 863882, 817711, 634045, 503807, 832083, 161667, 332238,
					985188, 626271, 436465, 547822, 496397, 76856, 343221,
				],
				[
					998983, 638696, 424820, 737770, 266084, 421332, 628369, 840131, 537735, 655740, 136120, 399678,
					912817, 281988, 715782, 928750, 450941, 176733, 695928,
				],
				[
					728755, 172254, 47126, 663092, 987180, 56539, 218891, 621936, 148209, 565803, 370194, 52199, 990490,
					506329, 538206, 567695, 496913, 273669, 492475,
				],
				[
					493042, 126959, 198821, 263231, 381322, 556191, 615496, 95912, 302544, 849586, 230339, 319564,
					869485, 834730, 187691, 898921, 738916, 671293, 627115,
				],
				[
					84418, 398842, 197682, 766763, 965351, 403719, 111730, 171727, 629212, 390838, 702378, 925433,
					715539, 715192, 716329, 618440, 910391, 45543, 934154,
				],
				[
					85864, 895798, 613952, 964678, 476819, 51177, 951630, 326303, 10242, 704918, 327628, 639624, 583231,
					36668, 164793, 196632, 362138, 627905, 60738,
				],
			],
			[926187, 926270, 969204, 979974],
		),
	).toStrictEqual([155, 155, 163, 164]);
});
