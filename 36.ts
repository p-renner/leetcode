function isValidSudoku(board: string[][]): boolean {
	for (let i = 0; i < board.length; i++) {
		const set1 = new Set<string>();
		const set2 = new Set<string>();

		for (let j = 0; j < board.length; j++) {
			if (set1.has(board[j][i]) || set2.has(board[i][j])) {
				return false;
			}

			if (board[j][i] != '.') {
				set1.add(board[j][i]);
			}

			if (board[i][j] != '.') {
				set2.add(board[i][j]);
			}
		}
	}

	let i = 0;
	let j = 0;

	while (j < 9) {
		let set = new Set();

		for (let row = i; row < i + 3; row++) {
			for (let col = j; col < j + 3; col++) {
				if (set.has(board[row][col])) {
					return false;
				}

				if (board[row][col] != '.') {
					set.add(board[row][col]);
				}
			}
		}

		i += 3;

		if (i >= 9) {
			i = 0;
			j += 3;
		}
	}

	return true;
}

test('isValidSudoku', () => {
	expect(
		isValidSudoku([
			['5', '4', '.', '.', '7', '.', '.', '.', '.'],
			['6', '.', '.', '1', '9', '5', '.', '.', '.'],
			['.', '9', '8', '.', '.', '.', '.', '6', '.'],
			['8', '.', '.', '.', '6', '.', '.', '.', '3'],
			['4', '.', '.', '8', '.', '3', '.', '.', '1'],
			['7', '.', '.', '.', '2', '.', '.', '.', '6'],
			['.', '6', '.', '.', '.', '.', '2', '8', '.'],
			['.', '.', '.', '4', '1', '9', '.', '.', '5'],
			['.', '.', '.', '.', '8', '.', '.', '7', '9'],
		]),
	).toBe(true);
	expect(
		isValidSudoku([
			['5', '3', '.', '5', '7', '.', '.', '.', '.'],
			['6', '.', '.', '1', '9', '5', '.', '.', '.'],
			['.', '9', '8', '.', '.', '.', '.', '6', '.'],
			['8', '.', '.', '.', '6', '.', '.', '.', '3'],
			['4', '.', '.', '8', '.', '3', '.', '.', '1'],
			['7', '.', '.', '.', '2', '.', '.', '.', '6'],
			['.', '6', '.', '.', '.', '.', '2', '8', '.'],
			['.', '.', '.', '4', '1', '9', '.', '.', '5'],
			['.', '.', '.', '.', '8', '.', '.', '7', '9'],
		]),
	).toBe(false);
	expect(
		isValidSudoku([
			['5', '3', '.', '.', '7', '.', '.', '.', '.'],
			['6', '5', '.', '1', '9', '5', '.', '.', '.'],
			['.', '9', '8', '.', '.', '.', '.', '6', '.'],
			['8', '.', '.', '.', '6', '.', '.', '.', '3'],
			['4', '.', '.', '8', '.', '3', '.', '.', '1'],
			['7', '.', '.', '.', '2', '.', '.', '.', '6'],
			['.', '6', '.', '.', '.', '.', '2', '8', '.'],
			['.', '.', '.', '4', '1', '9', '.', '.', '5'],
			['.', '.', '.', '.', '8', '.', '.', '7', '9'],
		]),
	).toBe(false);
	expect(
		isValidSudoku([
			['.', '.', '.', '.', '5', '.', '.', '1', '.'],
			['.', '4', '.', '3', '.', '.', '.', '.', '.'],
			['.', '.', '.', '.', '.', '3', '.', '.', '1'],
			['8', '.', '.', '.', '.', '.', '.', '2', '.'],
			['.', '.', '2', '.', '7', '.', '.', '.', '.'],
			['.', '1', '5', '.', '.', '.', '.', '.', '.'],
			['.', '.', '.', '.', '.', '2', '.', '.', '.'],
			['.', '2', '.', '9', '.', '.', '.', '.', '.'],
			['.', '.', '4', '.', '.', '.', '.', '.', '.'],
		]),
	).toBe(false);
});
